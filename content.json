{"meta":{"title":"Letme","subtitle":null,"description":"前端更新","author":"兔子先生","url":"http://yoursite.com"},"pages":[{"title":"tags","date":"2018-11-21T13:24:36.000Z","updated":"2018-11-21T14:02:34.173Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"CSS实现垂直居中的方法总结 ","slug":"CSS实现垂直居中的方法总结","date":"2018-11-22T02:20:01.000Z","updated":"2018-11-22T03:34:47.628Z","comments":true,"path":"2018/11/22/CSS实现垂直居中的方法总结/","link":"","permalink":"http://yoursite.com/2018/11/22/CSS实现垂直居中的方法总结/","excerpt":"","text":"注：以下demo都只是针对现代浏览器所做，未兼容低版本的IE以及其它非主流浏览器。 1. 使用绝对定位和负外边距对块级元素进行垂直居中html代码123&lt;div id=&quot;box&quot;&gt; &lt;div id=&quot;child&quot;&gt;我是测试DIV&lt;/div&gt;&lt;/div&gt; css代码：123456789101112131415#box &#123; width: 300px; height: 300px; background: #ddd; position: relative;&#125;#child &#123; width: 150px; height: 100px; background: orange; position: absolute; top: 50%; margin: -50px 0 0 0; line-height: 100px;&#125; 这个方法兼容性不错，但是有一个小缺点：必须提前知道被居中块级元素的尺寸，否则无法准确实现垂直居中。 2. 使用绝对定位和transformhtml代码：12345&lt;div id=&quot;box&quot;&gt;&lt;div id=&quot;child&quot;&gt; 我是一串很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长的文本&lt;/div&gt;&lt;/div&gt; css代码123456789101112#box &#123; width: 300px; height: 300px; background: #ddd; position: relative;&#125;#child &#123; background: #93BC49; position: absolute; top: 50%; transform: translate(0, -50%);&#125; 3. 另外一种使用绝对定位和负外边距进行垂直居中的方式html代码123&lt;div id=&quot;box&quot;&gt; &lt;div id=&quot;child&quot;&gt;我也是个测试DIV&lt;/div&gt;&lt;/div&gt; css代码1234567891011121314#box &#123; width: 300px; height: 300px; background: #ddd; position: relative;&#125;#child &#123; width: 50%; height: 30%; background: pink; position: absolute; top: 50%; margin: -15% 0 0 0;&#125; 这种方式的原理实质上和前两种相同。补充的一点是：margin的取值也可以是百分比，这时这个值规定了该元素基于父元素尺寸的百分比，可以根据实际的使用场景来决定是用具体的数值还是用百分比。 4. 绝对定位结合margin: autohtml代码：123&lt;div id=&quot;box&quot;&gt; &lt;div id=&quot;child&quot;&gt;呆呆今天退役了(。﹏。)&lt;/div&gt;&lt;/div&gt; css代码：12345678910111213141516#box &#123; width: 300px; height: 300px; background: #ddd; position: relative;&#125;#child &#123; width: 200px; height: 100px; background: #A1CCFE; position: absolute; top: 0; bottom: 0; margin: auto; line-height: 100px;&#125; 这种实现方式的两个核心是：把要垂直居中的元素相对于父元素绝对定位，top和bottom设为相等的值，我这里设成了0，当然你也可以设为99999px或者-99999px无论什么，只要两者相等就行，这一步做完之后再将要居中元素的margin设为auto，这样便可以实现垂直居中了。被居中元素的宽高也可以不设置，但不设置的话就必须是图片这种自身就包含尺寸的元素，否则无法实现。 5. 使用padding实现子元素的垂直居中html代码：123&lt;div id=&quot;box&quot;&gt; &lt;div id=&quot;child&quot;&gt;今天西安的霾严重的吓人，刚看了一眼PM2.5是422&lt;/div&gt;&lt;/div&gt; css代码：1234567891011#box &#123; width: 300px; background: #ddd; padding: 100px 0;&#125;#child &#123; width: 200px; height: 100px; background: #F7A750; line-height: 50px;&#125; 这种实现方式非常简单，就是给父元素设置相等的上下内边距，则子元素自然是垂直居中的，当然这时候父元素是不能设置高度的，要让它自动被填充起来，除非设置了一个正好等于上内边距+子元素高度+下内边距的值，否则无法精确的垂直居中。这种方式看似没有什么技术含量，但其实在某些场景下也是非常好用的。 6. 设置第三方基准html代码：1234&lt;div id=&quot;box&quot;&gt; &lt;div id=&quot;base&quot;&gt;&lt;/div&gt; &lt;div id=&quot;child&quot;&gt;今天写了第一篇博客，希望可以坚持写下去！&lt;/div&gt;&lt;/div&gt; css代码：123456789101112131415#box &#123; width: 300px; height: 300px; background: #ddd;&#125;#base &#123; height: 50%; background: #AF9BD3;&#125;#child &#123; height: 100px; background: rgba(131, 224, 245, 0.6); line-height: 50px; margin-top: -50px;&#125; 这种方式也非常简单，首先设置一个高度等于父元素高度一半的第三方基准元素，那么此时该基准元素的底边线自然就是父元素纵向上的中分线，做完这些之后再给要垂直居中的元素设置一个margin-top，值的大小是它自身高度的一半取负，则实现垂直居中。 7. 使用flex布局html代码：1&lt;div id=&quot;box&quot;&gt;雾霾天气，太久没有打球了&lt;/div&gt; css代码1234567#box &#123; width: 300px; height: 300px; background: #ddd; display: flex; align-items: center;&#125; 这种方式同样适用于块级元素：html代码：12345&lt;div id=&quot;box&quot;&gt; &lt;div id=&quot;child&quot;&gt; 程序员怎么才能保护好眼睛？ &lt;/div&gt;&lt;/div&gt; css代码：12345678910111213#box &#123; width: 300px; height: 300px; background: #ddd; display: flex; align-items: center;&#125;#child &#123; width: 300px; height: 100px; background: #8194AA; line-height: 100px;&#125; 8. 第二种使用弹性布局的方式html代码12345&lt;div id=&quot;box&quot;&gt; &lt;div id=&quot;child&quot;&gt; 答案当然是多用绿色的背景哈哈 &lt;/div&gt;&lt;/div&gt; css代码：1234567891011121314#box &#123; width: 300px; height: 300px; background: #ddd; display: flex; flex-direction: column; justify-content: center;&#125;#child &#123; width: 300px; height: 100px; background: #08BC67; line-height: 100px;&#125; 这种方式也是首先给父元素设置display:flex，设置好之后改变主轴的方向flex-direction: column，该属性可能的取值有四个，分别如下： row（该值为默认值）：主轴为水平方向，起点在左端； row-reverse：主轴为水平方向，起点在右端； column：主轴为垂直方向，起点在上沿； column-reverse：主轴为垂直方向，起点在下沿。 justify-content属性定义了项目在主轴上的对齐方式，可能的取值有五个，分别如下（不过具体的对齐方式与主轴的方向有关，以下的值都是假设主轴为从左到右的）： flex-start（该值是默认值）：左对齐； flex-end：右对齐； center：居中对齐； space-between：两端对齐，各个项目之间的间隔均相等； space-around：各个项目两侧的间隔相等。 9. 还有一种在前面已经见到过很多次的方式就是使用 line-height 对单行文本进行垂直居中html代码：123&lt;div id=&quot;box&quot;&gt; 我是一段测试文本&lt;/div&gt; css代码123456 #box&#123; width: 300px; height: 300px; background: #ddd; line-height: 300px;&#125; 这里有一个小坑需要大家注意：line-height(行高) 的值不能设为100%，我们来看看官方文档中给出的关于line-height取值为百分比时候的描述：基于当前字体尺寸的百分比行间距。所以大家就明白了，这里的百分比并不是相对于父元素尺寸而言，而是相对于字体尺寸来讲的。10. 使用 line-height 和 vertical-align 对图片进行垂直居中html代码123&lt;div id=&quot;box&quot;&gt; &lt;img src=&quot;duncan.jpeg&quot;&gt;&lt;/div&gt; css代码123456789#box&#123; width: 300px; height: 300px; background: #ddd; line-height: 300px;&#125;#box img &#123; vertical-align: middle;&#125;","categories":[],"tags":[]},{"title":"first file","slug":"CSS垂直居中的11种方法","date":"2018-11-21T13:57:44.000Z","updated":"2018-11-22T02:19:02.777Z","comments":true,"path":"2018/11/21/CSS垂直居中的11种方法/","link":"","permalink":"http://yoursite.com/2018/11/21/CSS垂直居中的11种方法/","excerpt":"","text":"历尽千辛万苦终于搭好了，先立一个好好学习的flag吧","categories":[],"tags":[]}]}